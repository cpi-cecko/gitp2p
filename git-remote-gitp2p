#!/usr/bin/env perl


use strict;
use warnings;
use v5.020;


use FindBin;
use lib "$FindBin::Bin/lib";

use Method::Signatures;
use Path::Tiny;
use IO::Socket::INET;
use IO::Select;
use IPC::Open2;
use File::pushd;
use JSON::XS;
use Log::Log4perl;

use GitP2P::Proto::Relay;
use GitP2P::Proto::Daemon;
use GitP2P::Proto::Packet;
use GitP2P::Core::Finder;
use GitP2P::Core::Common;


Log::Log4perl::init("$FindBin::Bin/gitp2p-log.conf");
my $log = Log::Log4perl->get_logger("gitp2p.helper");  
$log->info("gitp2p helper RUNNING");

my $cfg_file = "./gitp2p-config" if path("./gitp2p-config")->exists;
my $cfg = JSON::XS->new->ascii->decode(path($cfg_file)->slurp) 
    if $cfg_file ne "" and defined $cfg_file;


my ($remote, $url) = @ARGV;

sub echo($) {
    my $str = shift;
    system "echo", $str;
}

sub echo_empty {
    system "echo", "";
}

func get_repo_info(Str $url) {
    # gitp2p://<user_name>/<repo_name>
    if ($url !~ /^gitp2p:\/\/([a-z0-9@.-]*)\/(.*)$/) {
        $log->logdie("Invalid url: $url");
    }
    return ($1, $2);
}


func do_capabilities() {
    echo "fetch";
    echo "list";
    echo "push";
    echo_empty;
}


func get_repo_dir(Str $url) {
    my $repo_dir;
    if (path(".git")->exists) {
        $repo_dir = ".";
    } else {
        (undef, $repo_dir) = get_repo_info($url);
    }
    return $repo_dir;
}

# The relay contains a list of peers for a repo. Each peer has advertised its
# latest tags and remote refs.
func do_list() {
    # Get the latest refs which I have
    my $repo_dir = get_repo_dir($url);
    my @refs = GitP2P::Core::Common::show_refs($repo_dir);
    @refs = grep { $_ !~ /remotes/ } @refs; # Only send local refs
    map { $_ =~ s/\t+/?/g } @refs; # Delimit the refname from the sha with '?'

    # Send the list of my latest refs to the relay.
    my (undef, $repo) = get_repo_info($url);
    my $relay_msg = GitP2P::Proto::Relay::build("list-refs", [$repo, @refs]);
    my $relay_conn = GitP2P::Core::Finder::connect_to_relay(\$cfg);
    $relay_conn->send($relay_msg);

    # Receive the acknowledged list of latest refs.
    $log->info("Trying to receive latest unique refs");
    my $ack_list = <$relay_conn>; 
    chomp $ack_list;
    close $relay_conn;

    $log->logdie("NACK on trying to get list of refs")
        if $ack_list =~ /NACK/;

    # Echo the list to git.
    $log->info("Echoing received unique refs to git");
    for my $ref (split /:/, $ack_list) {
        $ref =~ s/\?/ /g;
        $log->info("Echoing: [$ref]");
        echo "$ref";
    }
    echo_empty;
}

# TODO: Use GitP2P::Core::Common::show_refs
func get_wants(ArrayRef[Str] $refs, Str $repo_dir) {
    my @want;
    my $out;
    {
        my $dir = pushd "./$repo_dir";
        $out = `git show-ref`;
    }
    my @my_refs = split /\n/, $out;
    for (@$refs) {
        $log->info("Ref: $_");
        $_ =~ /^([a-f0-9]{40}).*$/;
        push @want, $1
            if not grep { $_ } @my_refs;
    }

    return @want;
}

func get_haves(Str $repo_dir) {
    GitP2P::Core::Common::list_objects("./$repo_dir");
}

func create_objects_packet(ArrayRef[Str] $refs) {
    my $repo_dir;
    if (path(".git")->exists) {
        $repo_dir = ".";
    } else {
        (undef, $repo_dir) = get_repo_info($url);
    }

    my @want = get_wants($refs, $repo_dir);
    $log->info("Wants: " . scalar @want);
    my $packet = GitP2P::Proto::Packet->new;
    for (@want) {
        $packet->write("want $_");
    }

    my @have = get_haves($repo_dir);
    $log->info("Haves: " . scalar @have);
    for (@have) {
        $packet->write("have $_");
    }

    return $packet;
}

func do_fetch(ArrayRef[Str] $refs) {
    my ($owner, $repo) = get_repo_info($url);
    my $relay_msg = GitP2P::Proto::Relay::build("get-peers", [$repo, $owner]);

    my $s = GitP2P::Core::Finder::connect_to_relay(\$cfg);
    $s->send($relay_msg);

    my $resp = <$s>;
    chomp $resp;

    close $s;

    $log->logdie("Bad resp: '$resp'")
        if ($resp =~ /^NACK/);

    my $packet = create_objects_packet($refs);

    my @peers = split /,/, $resp;
    receive_objects(\@peers, $repo, $owner, $packet, $refs);

# Don't do ugly hacks
    return;

    # Ugly hack which adds by hand the HEAD reference to .git/packed-refs
    my $master_ref = (grep { $_ =~ qr(refs/heads/master$) } @$refs)[0];
    system "echo $master_ref >> $repo/.git/packed-refs";

# Don't add thyself to the relay
    return;

    # Anounce thyself to the relay
    my $dir = pushd $repo;
    my $user_id = qx(git config --get user.email);
    chomp $user_id;
    # -----------
    # REMEMBER to add ref name to the ref sha.
    # -----------
    my $last_ref = qx(git rev-list HEAD --max-count=1);
    chomp $last_ref;
    $s = GitP2P::Core::Finder::connect_to_relay(\$cfg, $cfg->{port_daemon});
    my $relay_add_msg = GitP2P::Proto::Relay::build("add-peer", [$repo, $user_id, $last_ref]);
    $s->send($relay_add_msg);

    $resp = <$s>;
    chomp $resp;

    close $s;

    $log->logdie("Bad resp: '$resp'")
        if $resp =~ /^NACK/;

    $log->info("Successfuly advertised to relay");
}

func receive_objects(ArrayRef[Str] $peers, Str $repo, Str $owner, 
                     GitP2P::Proto::Packet $packet, ArrayRef[Str] $refs) {
    my $pSelect = IO::Select->new;

    # Send desires
    my $id = 0; # Used to determine what each peer will send
    for my $peer (@$peers) {
        my $peer_packet = GitP2P::Proto::Packet->new;

        $peer_packet->write("repo $repo $owner");
        $peer_packet->write("id $id " . scalar @$peers);
        $peer_packet->append(\$packet);

        # TODO: If can't connect, remove peer.
        # TODO: How shall we reasign the ids?
        my $pS = GitP2P::Core::Finder::establish_connection($peer);
        $pSelect->add($pS);
        my $pack = GitP2P::Proto::Daemon::build_data(
              "fetch_pkt_line", \$peer_packet->to_send);
        $log->info("Pack: $pack");
        $pS->send($pack); 

        $id++;
    }

    my $TIMEOUT_SECS = 3;
    my @available_peers;
    while (my @ready = $pSelect->can_read($TIMEOUT_SECS)) {
        for my $peer (@ready) {
            my $obj = <$peer>;
            chomp $obj;
            while ($obj !~ /^end$/) {
                my $parsed_obj = GitP2P::Proto::Daemon->new;
                $log->info("received object: '$obj'");
                $parsed_obj->parse(\$obj);
                my $cnts = $parsed_obj->op_data;
                $log->info("pack contents: '$cnts'");
                
                my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 
                    "git", "index-pack", "-v", "--stdin", "--fix-thin", "--keep");
                print CHLD_IN $cnts;
                while (<CHLD_OUT>) {
                    $log->info("git-index-pack: $_");
                }

                $obj = <$peer>;
            }
            push @available_peers, $peer->peerhost . ":" . $peer->peerport;
            $pSelect->remove($peer);
            $peer->close;
        }
    }

    # TODO: Should we also check whether we have all objects?
    return unless $pSelect->count;

    # Retry in order to get the rest of the objects
    my $remaining_packet = create_objects_packet($refs);
    receive_objects(\@available_peers, $repo, $owner, $remaining_packet, $refs);
}

func do_push(HashRef[Str] $pushes) {
    use Data::Dumper;
    warn "Pushes: " . Dumper($pushes);
}


my $pushre = qr/^\w+\s (?<force> \+?) (?<local> .*) : (?<remote> .*)$/x;

while (<STDIN>) {
    chomp;
    next if $_ =~ /^\s*$/;
    $log->info("Op: $_");

    $_ =~ /^(\w+)\s?/;
    my ($cmd) = $1;
    if ($cmd =~ /capabilities/) {
        do_capabilities();
    }
    elsif ($cmd =~ /list/) {
        do_list();
    }
    elsif ($cmd =~ /fetch/) {
        /^\w+\s(.*)$/;
        my @refs = ($1);

        while (<STDIN>) {
            last if $_ =~ /^\s*$/;

            $_ =~ /^\w+\s(.*)$/;
            push @refs, $1;
        }

        do_fetch(\@refs);

        echo_empty;
    } 
    elsif ($cmd =~ /push/) {
        /$pushre/;
        my %pushes = ($+{"local"} => $+{force} . $+{remote});

        while (<STDIN>) {
            last if /^\s*$/;

            /$pushre/;
            $pushes{$+{"local"}} = $+{force} . $+{remote};
        }

        do_push(\%pushes);

        echo_empty;
    }
    else {
        $log->logdie("Invalid capability '$cmd'");
    }
}
