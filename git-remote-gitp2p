#!/usr/bin/env perl


use strict;
use warnings;
use v5.20;

use FindBin;
use lib "$FindBin::Bin/lib";

use Getopt::Long;
use Pod::Usage;
use Method::Signatures;
use Path::Tiny;
use IO::Socket::INET;
use Data::Dumper;

use GitP2P::Proto::Relay;
use GitP2P::Proto::Daemon;
use GitP2P::Proto::Packet;
use GitP2P::Core::Finder;
use GitP2P::Core::Common qw/unpack_objects/;


my $cfg = "";
my ($remote, $url) = @ARGV;

sub echo($) {
    my $str = shift;
    system "echo", $str;
}

sub echo_empty {
    system "echo", "";
}

func get_repo_info(Str $url) {
    # gitp2p://<user_name>/<repo_name>
    if ($url !~ /^gitp2p:\/\/([a-z0-9@.-]*)\/(.*)$/) {
        die "Invalid url: $url";
    }
    return ($1, $2);
}


func do_capabilities() {
    echo "fetch";
    echo "list";
    echo_empty;
}

func do_list() {
    my $relay = GitP2P::Core::Finder::get_relay("gitp2p-config");
    my $s = GitP2P::Core::Finder::establish_connection($relay, $cfg);

    my ($owner, $repo) = get_repo_info($url);

    my $msg = GitP2P::Proto::Relay::build("get-peers", [$repo, $owner]);

    $s->send($msg);

    my $resp = <$s>;
    chomp $resp;

    close $s;

    die "Bad resp: '$resp'"
        if ($resp =~ /^NACK/);

    my @peers = split /,/, $resp;

    my $list_msg = GitP2P::Proto::Daemon::build_comm("list", [$repo]);
    my $pS = GitP2P::Core::Finder::establish_connection($peers[0], $cfg);

    $pS->send($list_msg);
    
    $resp = <$pS>;
    chomp $resp;

    close $pS;

    my $refs = GitP2P::Proto::Daemon->new;
    $refs->parse($resp);

    my $cnts = $refs->op_data;

    for my $ref (split /\n/, $cnts) {
        $ref =~ s/\t+/ /g;
        echo "$ref";
    }
    echo_empty;
}

func do_fetch(ArrayRef[Str] $refs) {
    $cfg = "./cfg" if path("./cfg")->exists;

    my ($owner, $repo) = get_repo_info($url);
    my $relay_msg = GitP2P::Proto::Relay::build("get-peers", [$repo, $owner]);

    my $relay = GitP2P::Core::Finder::get_relay("gitp2p-config");
    my $s = GitP2P::Core::Finder::establish_connection($relay, $cfg);

    $s->send($relay_msg);

    my $resp = <$s>;
    chomp $resp;

    close $s;

    die "Bad resp: '$resp'"
        if ($resp =~ /^NACK/);

    my @want;
    my $out = `git show-ref 2>gitp2p.stderr`; # TODO: Check for error
    my @my_refs = split /\n/, $out;
    for (@$refs) {
        warn $_;
        $_ =~ /^([a-f0-9]{40}).*$/;
        push @want, $1
            if not grep { $_ } @my_refs;
    }

    my @have;
    # Runs git-unpack-objects because we currently don't know how to do unpack
    # by hand
    # TODO: Finding the .git repo is not so simple
    my $repo_root = path("./.git");
    if ($repo_root->exists) {
        warn "Getting haves";
        my $obj_dir = $repo_root->child("objects/pack");
        $obj_dir->child("pack")->exists
            and $repo_root->child("pack")->children
                and unpack_packs($repo_root->child("pack"), $obj_dir);

        my @obj_parents = $obj_dir->children(qr/^\d\d/);
        my @objects = map {
                        my $dir = $_;
                        map {
                            $dir->absolute . "/" . $_->basename;
                        } $dir->children;
                      } @obj_parents;

        @have = @objects;
    }

    warn "Wants: " . scalar @want;
    my $packet = GitP2P::Proto::Packet->new;
    for (@want) {
        $packet->write("want $_");
    }

    warn "Haves: " . scalar @have;
    for (@have) {
        $packet->write("have $_");
    }

    # TODO: Handle dead peers
    # Send desires
    my @peers = split /,/, $resp;
    my %peer_info;
    my $id = 0; # Used to determine what each pear will send
    for my $peer (@peers) {
        my $peer_packet = GitP2P::Proto::Packet->new;

        # pkt_line format ABNF
        # ====================
        #
        # message = repo NL id NL *wants *haves
        #
        # repo = "repo" SP user_id SP repo_name
        # id = "id" SP 1*DIGIT SP 1*DIGIT
        # wants = "want" SP obj-id NL
        # haves = "have" SP obj-id NL
        #
        # user_id = *ALNUM
        # repo_name = *ALNUM
        $peer_packet->write("repo $repo $owner");
        $peer_packet->write("id $id " . scalar @peers);
        $peer_packet->append(\$packet);

        #my $hexed = join "", map { sprintf "%02x", ord $_ } split //, $peer_packet->to_send;
        warn $peer_packet->to_send;
        my $pS = GitP2P::Core::Finder::establish_connection($peer, $cfg);
        my $pack = GitP2P::Proto::Daemon::build_data(
              "fetch", { 'user_id' => "dummy", 
                         'type' => "pkt_line",
                         'hash' => "dummy",
                         'cnts' => $peer_packet->to_send});
        warn $pack;
        $pS->send($pack); 

        $peer_info{$peer} = { id => $id
                            , sock => $pS
                            };

        $id++;
    }

    # Receives objects
    for my $peer (@peers) {
        # TODO: Fork
        my $pS = $peer_info{$peer}->{sock};
        my $obj = <$pS>;
        chomp $obj;
        while ($obj !~ /^end$/) {
            my $parsed_obj = GitP2P::Proto::Daemon->new;
            $parsed_obj->parse($obj);
            my (undef, undef, $hash) = split /:/, $parsed_obj->op_info;
            my $cnts = $parsed_obj->op_data;
            my ($dir, $file) = (substr($hash, 0, 2), substr($hash, 2));
            my $obj_path = path("$repo/.git/objects/$dir/$file")->touchpath;
            $obj_path->spew({binmode => ":raw"}, ($cnts));
            # Debug
            # path("temp/$dir/$file")->touchpath->spew({binmode => ":raw"}, ($cnts));

            $obj = <$pS>;
        }
        close $pS;
    }

    # Ugly hack which adds by hand the HEAD reference to .git/packed-refs
    my $master_ref = (grep { $_ =~ qr(refs/heads/master$) } @$refs)[0];
    system "echo $master_ref >> $repo/.git/packed-refs";

    # TODO: Send message to relay to add us as a peer
    my $me = `git config --get user.email`;
    $relay_msg = GitP2P::Proto::Relay::build("add-peer", [$repo, $me]);

    $s = GitP2P::Core::Finder::establish_connection($relay, $cfg);
    $s->send($relay_msg);

    $resp = <$s>;
    chomp $resp;

    warn "[INFO] Response: $resp";
    close $s;
}


while (<STDIN>) {
    chomp;
    next if $_ =~ /^\s*$/;
    warn $_;

    $_ =~ /^(\w+)\s?/;
    my ($cmd) = $1;
    if ($cmd =~ /capabilities/) {
        do_capabilities();
    }
    elsif ($cmd =~ /list/) {
        do_list();
    }
    elsif ($cmd =~ /fetch/) {
        $_ =~ /^\w+\s(.*)$/;
        my @refs = ($1);

        while (<STDIN>) {
            last if $_ =~ /^\s*$/;

            $_ =~ /^\w+\s(.*)$/;
            push @refs, $1;
        }

        do_fetch(\@refs);

        echo_empty;
    } 
    else {
        die "Invalid capability '$cmd'";
    }
}
